# Python

### Introduction to Python

Python is a high-level, interpreted programming language known for its simplicity and readability. It was created by Guido van Rossum and first released in 1991. Python emphasizes code readability and a simple syntax, which makes it an ideal language for beginners and experienced programmers alike.

### Key Features of Python:

- *Simple and Easy to Learn:* Python's syntax is straightforward and easy to understand, making it accessible to beginners.
- *Versatile:* Python supports multiple programming paradigms, including procedural, object-oriented, and functional programming.
- *Interpreted:* Python code is executed line by line by the Python interpreter, which makes development and debugging efficient.
- *Extensive Standard Library:* Python comes with a comprehensive standard library, providing modules and functions for various tasks such as file I/O, networking, and data processing.
- *Dynamic Typing:* Python is dynamically typed, meaning variable types are determined at runtime, which allows for flexibility but also requires careful attention to variable types.
- *Large Community and Ecosystem:* Python has a vast community of developers who contribute to its ecosystem by creating libraries, frameworks, and tools to extend its capabilities.

### Quotes for Printing and Assigning:

- Both single and double quotes are valid for printing and assigning values.
- Example:
    
    python
    first_name = 'hello'
    last_name = 'world'
    full_name = first_name + ' ' + last_name
    print(full_name)
    
    
    In order to declare a null int:
    
    python
    x : int
    
    
    For strings:
    
    python
    str_name = None
    
    

### Comments:

- Comments can be single-line or multi-line.
- Example:
    
    python
    # This is a single-line comment
    """
    This is a
    multi-line comment
    """
    
    

### Getting the Type of a Variable:

- Use the type() function to get the type of any variable.
- Example:
    
    python
    print(type(full_name))
    
    
- For string concatenation, use the + operator.
- For combining strings with integers or other numbered data types, use:
    - Direct concatenation: print('age of the kid is:', age)

Example:

python
age = 7
print('age of the kid is:', age)

name = input("Enter your name: ")
print("Hello, " + name)

age = int(input("Enter your age: "))
age += 1
print('Your age after increment is ' + str(age))  # Works the same
print('Your age after increment is ', age)         # Works the same



# Operators

1. *Arithmetic Operators*:
    - Addition (+), Subtraction (`), Multiplication (), Division (/`): These operators work as expected for performing arithmetic operations on numbers.
    - Floor Division (//): Performs division and returns the integer part of the result.
    - Modulus/Remainder (%): Returns the remainder of the division.
2. *Assignment Operators*:
    - =: Assigns the value on the right to the variable on the left.
    - +=, =, =, /=: Perform the operation and then assign the result to the variable.
    - //=, %=, *=: Similar to above, but for floor division, modulus, and exponentiation respectively.
3. *Comparison Operators*:
    - ==: Checks if two values are equal.
    - !=: Checks if two values are not equal.
    - <, <=, >, >=: Compare values for less than, less than or equal to, greater than, and greater than or equal to respectively.
4. *Logical Operators*:
    - and, or, not: Used to perform logical operations (and returns True if both operands are True, or returns True if at least one operand is True, not returns the negation of the operand).
5. *Identity Operators*:
    - is: Returns True if both variables are the same object.
    - is not: Returns True if both variables are not the same object.
6. *Membership Operators*:
    - in: Returns True if a value is present in a sequence (e.g., list, tuple, string).
    - not in: Returns True if a value is not present in a sequence.
7. *Bitwise Operators*:
    - &, |, ^: Bitwise AND, OR, XOR operators respectively.
    - <<, >>: Shift the bits of a number left or right by the specified number of positions.

# Raise to the power:

python
2**2 #4
2**3 #8


## *Getting the Number of Elements in a List:*

- Use Python's built-in len() function.
- Example:
    
    python
    numbers = [1, 2, 3]
    print(len(numbers))  # Output: 3
    
    

## *Converting String to List:*

- Use the list() constructor to convert a string into a list.
- Example:
    
    python
    x = list("abc")
    print(x)  # Output: ['a', 'b', 'c']
    
    
    

## *Accessing Elements in Reverse Order:*

- Python allows accessing elements in a list in reverse order using negative indices.
- Example:
    
    python
    print(students[-1])  # First element from the end
    print(students[-2])  # Second element from the end
    
    
    

### Type Casting:

- Example:
    
    python
    age = 21
    age += 1
    print('My age after increment is ' + str(age)) #22
    
    # Implicit type casting (automatic conversion)
    x = 10  # integer
    y = 3.5  # float
    
    # Adding an integer and a float results in a float
    result = x + y
    print("Result (implicit):", result)  # Output: Result (implicit): 13.5
    
    # Explicit type casting (manual conversion)
    a = 10.5  # float
    b = 7  # integer
    
    # Convert float to integer using int()
    c = int(a)
    print("Integer value of 'a':", c)  # Output: Integer value of 'a': 10
    
    # Convert integer to float using float()
    d = float(b)
    print("Float value of 'b':", d)  # Output: Float value of 'b': 7.0
    
    # Convert integer to string using str()
    e = str(b)
    print("String value of 'b':", e)  # Output: String value of 'b': 7
    
    # Convert string to integer using int()
    f = "15"
    g = int(f)
    print("Integer value of 'f':", g)  # Output: Integer value of 'f': 15
    
    # Convert string to float using float()
    h = "3.14"
    i = float(h)
    print("Float value of 'h':", i)  # Output: Float value of 'h': 3.14
    
    

### Booleans:

- Booleans are written as True & False, not true & false.

### Multiple Assignment of Variables:

- Example:
    
    python
    x, y, z = 1, 2, 3
    
    
    
    or
    
    python
    ali = ahmed = ayesha = 30
    
    

### String Methods:

- Various string manipulation methods are available.
- Example:
    
    python
    name = "john doe"  # Define a string variable
    
    # find method: returns the index of the first occurrence of the specified substring
    index = name.find("doe")
    print("Index of 'doe':", index)  # Output: Index of 'doe': 5
    
    # len method: returns the length of the string
    length = len(name)
    print("Length of the string:", length)  # Output: Length of the string: 8
    
    # capitalize method: capitalizes the first character of the string
    capitalized_name = name.capitalize()
    print("Capitalized name:", capitalized_name)  # Output: Capitalized name: John doe
    
    # upper method: converts all characters in the string to uppercase
    uppercase_name = name.upper()
    print("Uppercase name:", uppercase_name)  # Output: Uppercase name: JOHN DOE
    
    # lower method: converts all characters in the string to lowercase
    lowercase_name = name.lower()
    print("Lowercase name:", lowercase_name)  # Output: Lowercase name: john doe
    
    # isdigit method: returns True if all characters in the string are digits, otherwise False
    is_digit = name.isdigit()
    print("Is 'name' a digit?", is_digit)  # Output: Is 'name' a digit? False
    
    # isalpha method: returns True if all characters in the string are alphabetic, otherwise False
    is_alpha = name.isalpha()
    print("Is 'name' alphabetic?", is_alpha)  # Output: Is 'name' alphabetic? False
    
    # count method: returns the number of occurrences of a specified substring in the string
    count = name.count("o")
    print("Count of 'o' in 'name':", count)  # Output: Count of 'o' in 'name': 2
    
    # replace method: replaces all occurrences of a specified substring with another string
    replaced_name = name.replace("doe", "smith")
    print("Replaced name:", replaced_name)  # Output: Replaced name: john smith
    
    # String repetition using multiplication
    name_repeated = name * 6
    print("Name repeated 6 times:", name_repeated)  # Output: Name repeated 6 times: john doejohn doejohn doejohn doejohn doejohn doe
    
    
    ## Taking User Input:
    
    - Python allows for user input using the input() function.
    - By default, input is treated as a string.
    - Example:
        
        python
        name = input("Enter your name: ")
        print("Hello," + name)
        
        
        
    
    ### Type Casting for Input:
    
    - User input is treated as a string by default, so for numerical values like integers or floats, type casting is necessary.
    - Example:
        
        python
        age = int(input("Enter your age: "))
        
        
        
    
    ### Modules in Python:
    
    Modules in Python are files containing Python code that can be used in other Python programs. They help organize code into reusable blocks, making development more efficient.
    
    ### Importing Modules:
    
    1. *Importing Entire Module:*
        
        python
        import module_name
        
        
    2. *Importing Specific Functions/Classes/Variables:*
        
        python
        from module_name import function_name, class_name, variable_name
        
        
        
    3. *Importing All Functions/Classes/Variables:*
        
        python
        from module_name import *
        
        
        
    
    ### Examples:
    
    1. *Importing Entire Module:*
        
        python
        import math
        print(math.pi)
        
        
        
    2. *Importing Specific Functions/Classes/Variables:*
        
        python
        from math import sqrt, pi
        print(sqrt(16))
        print(pi)
        
        
        
    3. *Importing All Functions/Classes/Variables:*
        
        python
        from math import *
        print(sin(90))
        print(cos(0))
        
        
        
    
    ### Notes:
    
    - It's recommended to import only what you need to avoid namespace pollution.
    - Modules can be installed using package managers like pip, and they can be custom-made or built-in Python modules.
    - Importing modules makes Python highly extensible and allows leveraging existing code.
    
    ### Math Functions:
    
    - Python's math module provides various mathematical functions.
    - Examples include rounding, ceiling, floor, absolute value, power, square root, maximum, and minimum.
    - Example:
        
        python
        import math
        
        # Define some numbers for demonstration
        x = 3.14159
        y = -2
        numbers = [1, 3, 5, 2, 4]
        
        # round: Rounds the number x to 2 decimal places
        rounded_x = round(x, 2)
        print("Rounded x:", rounded_x)  # Output: Rounded x: 3.14
        
        # ceil: Returns the smallest integer greater than or equal to x
        ceiled_x = math.ceil(x)
        print("Ceiled x:", ceiled_x)  # Output: Ceiled x: 4
        
        # floor: Returns the largest integer less than or equal to x
        floored_x = math.floor(x)
        print("Floored x:", floored_x)  # Output: Floored x: 3
        
        # abs: Returns the absolute value of y
        absolute_y = abs(y)
        print("Absolute y:", absolute_y)  # Output: Absolute y: 2
        
        # pow: Returns x raised to the power of y
        power_result = pow(2, 3)
        print("2 raised to the power of 3:", power_result)  # Output: 2 raised to the power of 3: 8
        
        # sqrt: Returns the square root of 16
        sqrt_result = math.sqrt(16)
        print("Square root of 16:", sqrt_result)  # Output: Square root of 16: 4.0
        
        # max: Returns the maximum value from the list of numbers
        max_number = max(numbers)
        print("Maximum number:", max_number)  # Output: Maximum number: 5
        
        # min: Returns the minimum value from the list of numbers
        min_number = min(numbers)
        print("Minimum number:", min_number)  # Output: Minimum number: 1
        
        
    
    ### String Slicing:
    
    - Slicing creates a substring by extracting elements from another string.
    - Start is inclusive while stop is exclusive,shortcuts are the goat
    - Syntax: [start:stop:step]
    - Example:
        
        python
        slicing = create a substring by extracting elements from another string
        indexing[] or slice()
        [start:stop:step]
        
        name = "Bro Code"
        
        first_name = name[:3]       # [0:3]
        last_name = name[4:]        # [4:end]
        funky_name = name[::2]      # [0:end:2]
        reversed_name = name[::-1]  # [0:end:-1]
        
        print(reversed_name)
        
        website1 = "http://google.com"
        website2 = "http://wikipedia.com"
        
        slice = slice(7,-4)
        
        print(website1[slice])
        print(website2[slice])
        
        
    
    ### Conditional Statements (if-elif-else):
    
    - Used to execute a block of code based on a condition.
    - Syntax:
        
        python
        if condition:
            # code
        elif condition:
            # code
        else:
            # code
        
        
    - Example:
        
        python
        age = int(input("How old are you?: "))
        
        if age == 100:
            print("You are a century old!")
        elif age >= 18:
            print("You are an adult!")
        else:
            print("You are a child!")
        
        
        
    
    ### Logical Operators (and, or, not):
    
    - Used to combine conditional statements.
    - Example:
        
        python
        temp = int(input("What is the temperature outside?: "))
        
        if temp >= 0 and temp <= 30:
            print("The temperature is good today!")
        elif temp < 0 or temp > 30:
            print("The temperature is bad today!")
        
        
        
    
    ### While Loop:
    
    - Executes a block of code as long as a condition is true.
    - Example:
        
        python
        name = ""
        while len(name) == 0:
            name = input("Enter your name or I will keep asking: ")
        
        
        
    
    ### For Loop:
    
    - Used to iterate over a sequence (such as a list or range).
    - Example:
        
        python
        import time
        
        for seconds in range(10, 0, -1):
            print(seconds)
            time.sleep(1)
        print("Boom, you're done.")
        
        
    
    python
    for i in range (10):
        print(i+1)
    
    for i in range (50,100):
        print(i+1)
    
    for seconds in range (10,0,-1):
        print(seconds)
    
    
    ### Nested Loops:
    
    - Loops inside other loops to execute complex patterns.
    - Example:
        
        python
        rows = int(input("Enter number of rows: "))
        columns = int(input("Enter number of columns: "))
        symbol = input("Enter a symbol: ")
        for i in range(rows):
            for j in range(columns):
                print(symbol, end="")
            print()
        
        
    - end="" is used to prevent the loop from printing the symbol one by one on every line.
    - print() is used to create a new line.

### Loop Control Statements:

- break: Terminates the loop entirely.
- continue: Skips to the next iteration of the loop.
- pass: Does nothing, acts as a placeholder.

Example:

python
while True:
    name = input("Enter your name: ")
    if name != "":
        break

phone_number = "123-456-7890"
for i in phone_number:
    if i == "-":
        continue
    print(i, end="")

for i in range(1, 21):
    if i == 13:
        pass
    else:
        print(i)



### Lists:

- Used to store multiple items in a single variable.
- Various methods like append(), remove(), sort(), etc., are available for manipulation.

Example:

python
food = ["pizza","hamburger","hotdog","spaghetti","pudding"]
for x in food:
    print(x)



### 2D Lists:

- A list of lists.

Example:

python
drinks = ["coffee","soda","tea"]
dinner = ["pizza","hamburger","hotdog"]
dessert = ["cake","ice cream"]

food = [drinks,dinner,dessert]

print(food[0][0])



### Tuple:

- Ordered and unchangeable collection used to group together related data.

Example:

python
student = ("Bro",21,"male")

print(student.count("Bro"))
print(student.index("male"))

for x in student:
    print(x)

if "Bro" in student:
    print("Bro is here!")



### Set:

- Unordered and unindexed collection with no duplicate values.
- Faster than lists.
- Sets in Python display elements in an unordered manner, appearing randomly each time they are accessed.
- The sequence in which elements are added to a set is not preserved; they are not displayed in the order they are inserted.
- Sets automatically eliminate duplicate elements, ensuring that each element appears only once within the set.

Example:

python

utensils = {"fork","spoon","knife"}
dishes = {"bowl","plate","cup","knife"}

#utensils.add("napkin")
#utensils.remove("fork")
#utensils.clear()
#dishes.update(utensils)
#dinner_table = utensils.union(dishes)

#print(dishes.difference(utensils))
#print(utensils.intersection(dishes))

for x in utensils:
    print(x)


### Dictionary:

- A changeable, ordered collection of unique key:value pairs.
- Fast due to hashing.
- Ordered In terms of dictionary means that they remain in the order in which they have been setted

Example:

python

capitals = {
             'USA':'Washington DC',
             'India':'New Delhi',
             'China':'Beijing',
             'Russia':'Moscow'
           }

# capitals.update({'Germany':'Berlin'}) added berlin as it was not present
# capitals.update({'USA':'Las Vegas'}) not only adds but also updates
# capitals.pop('China') deletes china
# capitals.clear() clear all

# print(capitals['Germany']) let's say its not present then it will generate
# error so we use get method,it displays none if not present
# print(capitals.get('Germany')) safe & recommended
# print(capitals.keys()) only keys
# print(capitals.values()) only values
# print(capitals.items()) key & values but separately

for key,value in capitals.items():
    print(key, value) # both without any format


### Index Operator []:

- Gives access to a sequence’s element (str, list, tuples).

Example:

python
name = "bro Code!"

first_name = name[:3].upper()
last_name = name[4:].lower()
last_character = name[-1]

print(first_name)
print(last_name)
print(last_character)



### Functions:

- A block of code executed only when called.
- Use return statement to send values back to the caller.

Example:

python
def hello(first_name, last_name, age):
    print("hello " + first_name + " " + last_name)
    print("You are " + str(age) + " years old")
    print("Have a nice day!")

hello("Bro", "Code", 21)



### Keyword Arguments:

- Arguments preceded by an identifier when passed to a function.
- The order of arguments doesn't matter.

Example:

python
def hello(first,middle,last):
    print("Hello "+first+" "+middle+" "+last)

hello(last="Code",middle="Dude",first="Bro")



### Nested Functions Calls:

- Function calls inside other function calls.

Example:

python
# nested functions calls =  function calls inside other function calls
#                           innermost function calls are resolved first
#                           returned value is used as argument for the next outer function

# num = input("Enter a whole positive number: ")
# num = float(num)
# num = abs(num)
# num = round(num)
# print(num)

print(round(abs(float(input("Enter a whole positive number: ")))))


### LEGB Scopes in Python:

- Python looks for variable names in Local, Enclosing, Global, and Built-in scopes.

Example:

python
x = "global"

def outer_func():
    x = "enclosing"

    def inner_func():
        x = "local"
        print("Inner function:", x)

    inner_func()
    print("Outer function:", x)

outer_func()
print("Global scope:", x)



### args and *kwargs:

- args: Packs all arguments into a tuple.
- *kwargs: Packs all arguments into a dictionary.
- Useful , so that a function can accept varying amount of arguments.

Example:

python
def add(*args):
    sum = 0
    for i in args:
        sum += i
    return sum

print(add(1,2,3,4,5,6,7,8))

def hello(**kwargs):
    print("Hello", end=" ")
    for key, value in kwargs.items():
        print(value, end=" ")

hello(pre_title="mister", title="Mr.", first="Bro", middle="Dude", last="Code")


### Random Module:

- random.randint(): Generates a random integer.
- random.choice(): Selects a random element from a sequence.

Example:

python
import random

low = 1
high = 100
options = ("Rock", "Paper", "Scissors")
cards = ["2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "A"]

# number = random.random()
# number = random.randint(low, high)
# choice = random.choice(options)
# random.shuffle(cards)

# -------------- NUMBER GUESSING GAME --------------

import random

low = 1
high = 100
guesses = 0
number = random.randint(low, high)

while True:
    guess = int(input(f"Enter a number between ({low} - {high}): "))
    guesses += 1

    if guess < number:
        print(f"{guess} is too low")
    elif guess > number:
        print(f"{guess} is too high")
    else:
        print(f"{guess} is correct!")
        break

print(f"This round took you {guesses} guesses")


# File Handling:

---

By default path is stated with single \ but in python we have to use extra \ , atlast it becomes: c\\some file etc

---

### File Detection:

python
import os

path = "C:\\Users\\User\\Desktop\\test.txt"

if os.path.exists(path):
    print("That location exists!")
    if os.path.isfile(path):
        print("That is a file")
    elif os.path.isdir(path):
        print("That is a directory")
else:
    print("That location doesn't exist!")



### Finding a File:

python
try:
    with open('test.txt') as file:
        print(file.read())
except FileNotFoundError:
    print("That file was not found :(")



### Writing to a File:

python
text = "Yooooooooo\\nThis is some text\\nHave a good one!\\n"

with open("test.txt", "w") as file:
    file.write(text)
#r is by default mode,w writes but also overrides text ,so using a is recommended


### Copying Files:

python
# copyfile() =  copies contents of a file
# copy() =       copyfile() + permission mode + destination can be a directory
# copy2() =     copy() + copies metadata (file’s creation and modification times)

import shutil

shutil.copyfile('test.txt','copy.txt') #src,dst



### Moving Files:

python
import os

source = "C:\\Users\\User\\Desktop\\source.txt"
destination = "C:\\Users\\User\\Desktop\\destination.txt"

try:
    if os.path.exists(destination):
        print("There is already a file there")
    else:
        os.replace(source,destination)
        print(source+" was moved")
except FileNotFoundError:
    print(source+" was not found")



### Deleting Files:

python
import os
import shutil

path = "test.txt"

try:
    os.remove(path)    #delete a file
    #os.rmdir(path)     #delete an empty directory
    #shutil.rmtree(path)#delete a directory containing files
except FileNotFoundError:
    print("That file was not found")
except PermissionError:
    print("You do not have permission to delete that")
except OSError:
    print("You cannot delete that using that function")
else:
    print(path+" was deleted")


### String Formatting Examples:

### Concatenation:

python
# Define variables
animal = "cow"
item = "moon"

# Print using concatenation
print("The "+animal+" jumped over the "+item)



### Using str.format() with Positional Arguments:

python
# Print using str.format() method with positional arguments
print("The {} jumped over the {}".format("cow","moon"))

# Print using str.format() method with positional arguments (indexed)
print("The {0} jumped over the {1}".format(animal,item)) # positional arguments



### Using str.format() with Keyword Arguments:

python
# Print using str.format() method with keyword arguments
print("The {animal} jumped over the {item}".format(animal="cow",item="moon"))   # keyword arguments



### Using format field {}:

python
# Using format field {}
text = "The {} jumped over the {}"
print(text.format("cow","moon"))



### Printing with Variables:

python
# Define variable
name = "Bro"

# Printing with variable using str.format() method
print("My name is {}".format(name))



### Padding with Variables:

python
# Printing with variable and padding using str.format() method
print("My name is {:10}".format(name))   # amount of padding
print("My name is {:<10}".format(name))  # < = left align
print("My name is {:>10}".format(name))  # > = right align
print("My name is {:^10}".format(name))  # ^ = center align



### Formatting Numbers:

python
# Define variable
number = 1000

# Printing formatted number using str.format() method
print("The number pi is {:.3f}".format(number))  # Format as floating point with 3 decimal places
print("The number is {:,}".format(number))       # Format with comma as a thousands separator
print("The number is {:b}".format(number))       # Format as binary
print("The number is {:o}".format(number))       # Format as octal
print("The number is {:X}".format(number))       # Format as hexadecimal
print("The number is {:E}".format(number))       # Format in scientific notation
